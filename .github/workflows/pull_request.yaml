name: Pull request: plan

on:
  pull_request:
env:
  TF_LOG: INFO
  TF_INPUT: false

jobs: 
  check-code:
    runs-on: self-hosted
    environment: production
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to vnet for the config files
    defaults:
        run:
          shell: bash

    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3
       # Install the selected version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: ${{ secrets.TERRAFORM_VERSION }}
    
     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          id: init
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: terraform init --backend-config="access_key=$AWS_ACCESS_KEY_ID" --backend-config="secret_key=$AWS_SECRET_ACCESS_KEY"
    
    
        # Run a terraform validate
        - name: Terraform Validate
          id: validate
          # Run even if formatting fails
          if: success() || failure()
          run: terraform validate -no-color



        - name: Terraform Plan
          id: plan
          env:
            TF_VAR_token_id: ${{ secrets.TF_VAR_TOKEN_ID }}
            TF_VAR_token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}           
          run: terraform plan -input=false -no-color -out=tfplan && terraform show -no-color tfplan
        
        - name: Update PR
          uses: actions/github-script@v6
          id: plan-comment
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
              });
              const output = `#### HCP Terraform Plan Output
                  \`\`\`
                  Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                  \`\`\`
                  [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
                  `;
              // 3. Delete previous comment so PR timeline makes sense
              if (botComment) {
                github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                });
              }
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
