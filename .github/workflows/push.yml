name: Push to feature branch

on:
  push:
    branches:
      - '*'
      - 'main'
env:
  TF_LOG: INFO
  TF_INPUT: false

jobs: 
  check-code:
    runs-on: self-hosted
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to vnet for the config files
    defaults:
        run:
          shell: bash

    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3
       # Install the selected version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: ${{ secrets.TERRAFORM_VERSION }}
    
     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          id: init
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
            STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
            CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
            AWS_ACCESS_KEY_ID: "test"
            AWS_SECRET_ACCESS_KEY: "test"
          run: terraform init -backend-config="access_key=$AWS_ACCESS_KEY_ID" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY"
    
    
       # Run a terraform fmt to check syntax
        - name: Terraform Format
          id: fmt
          run: terraform fmt -check
    
        # Run a terraform validate
        - name: Terraform Validate
          id: validate
          # Run even if formatting fails
          if: success() || failure()
          run: terraform validate -no-color
